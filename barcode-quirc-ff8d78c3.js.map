{"version":3,"file":"barcode-quirc-ff8d78c3.js","sources":["../src/workers/barcode-quirc.js"],"sourcesContent":["import * as Comlink from 'comlink';\nimport wasm from '../wasm/barcode.wasm';\n\nclass BarcodeScanner {\n  get code(){\n    return this.result;\n  }\n\n  constructor() {\n    this.result;\n    this.memoryFromWasm = null;\n    this.handlePrintString = this.handlePrintString.bind(this);\n    this.wasmLoader = null;\n  }\n\n  async init(){\n    if (this.wasmLoader) return;\n\n    this.wasmLoader = await wasm({\n      env: {\n        memory: new WebAssembly.Memory({ initial: 1 }),\n        STACKTOP: 0,\n        jsPrintString: this.handlePrintString,\n      },\n      wasi_snapshot_preview1: { fd_write: console.log },\n    });\n  }\n\n  /**\n   * \n   * @param {Uint8} ptr \n   * @param {int} len\n   * Since we can only communicate with number, pass number, return number with wasm\n   * we need to translate the pointer number\n   * this function will be executed inside the C code, and will translate\n   * the pointer string result wether its contain error or the success data itself\n   * the error will contain error_decode prefix therefore to be used as error catcher / handler\n   * we use string because it is easier to translate instead of object, array. etc.\n   */\n  handlePrintString(ptr, len) {\n    const view = new Uint8Array(this.memoryFromWasm.buffer, ptr, len);\n    let string = '';\n    for (let i = 0; i < len; i++) {\n      string += String.fromCharCode(view[i]);\n    }\n\n    // error handling\n    if(string.indexOf('error_decode') > -1) {\n      console.log('ERROR DECODE', string);\n      this.result = false;\n    } else {\n      this.result = string;\n    }\n  }\n\n  translate(imageData){\n    if(!this.wasmLoader) {\n      throw new Error('WASM not loaded');\n    }\n    let p = null;\n    let freeFunc;\n    try {\n      const { instance: {\n          exports: {\n            memory,\n            decode_qr_code,\n            malloc,\n            free,\n          } \n        } \n      } = this.wasmLoader;\n      freeFunc = free;\n\n      // define memory for later use for translation.\n      this.memoryFromWasm = memory;\n\n      // allocate memory for image data;\n      const numBytes = imageData.width * imageData.height * 4;\n      p = malloc(numBytes);\n      const imageOnHeap = new Uint8ClampedArray(memory.buffer, p, numBytes);\n      imageOnHeap.set(imageData.data);\n      \n      // processing decode, later will trigger handlePrintString() from\n      // the C code\n      decode_qr_code(p, imageData.width, imageData.height);\n\n      // free memory image data\n      free(p);\n    } catch (_e) {\n      console.log('ERROR TRANSLATE', _e);\n\n      // free memory for image data if exist.\n      if (p && freeFunc) freeFunc(p);\n      this.result = false;\n    }\n  }\n}\n\nlet scanner = new BarcodeScanner();\nComlink.expose(scanner);"],"names":["scanner","code","this","result","[object Object]","memoryFromWasm","handlePrintString","bind","wasmLoader","wasm","env","memory","WebAssembly","Memory","initial","STACKTOP","jsPrintString","wasi_snapshot_preview1","fd_write","console","log","ptr","len","view","Uint8Array","buffer","string","i","String","fromCharCode","indexOf","imageData","Error","freeFunc","p","instance","exports","decode_qr_code","malloc","free","numBytes","width","height","Uint8ClampedArray","set","data","_e"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uyBAkGA,IAAIA,EAAU,IA/Fd,MACEC,WACE,OAAOC,KAAKC,OAGdC,cACEF,KAAKC,OACLD,KAAKG,eAAiB,KACtBH,KAAKI,kBAAoBJ,KAAKI,kBAAkBC,KAAKL,MACrDA,KAAKM,WAAa,KAGpBJ,aACMF,KAAKM,aAETN,KAAKM,iBAAmBC,EAAK,CAC3BC,IAAK,CACHC,OAAQ,IAAIC,YAAYC,OAAO,CAAEC,QAAS,IAC1CC,SAAU,EACVC,cAAed,KAAKI,mBAEtBW,uBAAwB,CAAEC,SAAUC,QAAQC,QAehDhB,kBAAkBiB,EAAKC,GACrB,MAAMC,EAAO,IAAIC,WAAWtB,KAAKG,eAAeoB,OAAQJ,EAAKC,GAC7D,IAAII,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAKK,IACvBD,GAAUE,OAAOC,aAAaN,EAAKI,IAIlCD,EAAOI,QAAQ,iBAAmB,GACnCX,QAAQC,IAAI,eAAgBM,GAC5BxB,KAAKC,QAAS,GAEdD,KAAKC,OAASuB,EAIlBtB,UAAU2B,GACR,IAAI7B,KAAKM,WACP,MAAM,IAAIwB,MAAM,mBAElB,IACIC,EADAC,EAAI,KAER,IACE,MAAQC,UACJC,SAASzB,OACPA,EAAM0B,eACNA,EAAcC,OACdA,EAAMC,KACNA,KAGFrC,KAAKM,WACTyB,EAAWM,EAGXrC,KAAKG,eAAiBM,EAGtB,MAAM6B,EAAWT,EAAUU,MAAQV,EAAUW,OAAS,EACtDR,EAAII,EAAOE,GACS,IAAIG,kBAAkBhC,EAAOc,OAAQS,EAAGM,GAChDI,IAAIb,EAAUc,MAI1BR,EAAeH,EAAGH,EAAUU,MAAOV,EAAUW,QAG7CH,EAAKL,GACL,MAAOY,GACP3B,QAAQC,IAAI,kBAAmB0B,GAG3BZ,GAAKD,GAAUA,EAASC,GAC5BhC,KAAKC,QAAS,cAMLH"}